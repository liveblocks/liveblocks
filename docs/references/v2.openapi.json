{
  "openapi": "3.1.0",
  "info": {
    "title": "API v2",
    "version": "2.0"
  },
  "servers": [
    {
      "url": "https://api.liveblocks.io/v2"
    }
  ],
  "paths": {
    "/rooms": {
      "get": {
        "summary": "Get rooms",
        "tags": [],
        "responses": {
          "200": {
            "description": "Success. Returns the list of rooms and the next page URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRooms"
                },
                "examples": {
                  "example": {
                    "value": {
                      "nextPage": "/v2/rooms?startingAfter=W1siaWQiLCJVRzhWYl82SHRUS0NzXzFvci1HZHQiXSxbImNyZWF0ZWRBdCIsMTY2MDAwMDk4ODEzN11d",
                      "data": [
                        {
                          "type": "room",
                          "id": "HTOGSiXcORTECjfNBBLii",
                          "lastConnectionAt": "2022-08-08T23:23:15.281Z",
                          "createdAt": "2022-08-08T23:23:15.281Z",
                          "metadata": {
                            "name": [
                              "My room"
                            ],
                            "type": [
                              "whiteboard"
                            ]
                          },
                          "defaultAccesses": [
                            "room:write"
                          ],
                          "groupsAccesses": {
                            "product": [
                              "room:write"
                            ]
                          },
                          "usersAccesses": {
                            "vinod": [
                              "room:write"
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "operationId": "get-rooms",
        "description": "Returns a list of your rooms. The rooms are returned sorted by creation date, from newest to oldest. You can filter rooms by metadata, users accesses and groups accesses.\n\nThere is a pagination system where the next page URL is returned in the response as `nextPage`.\nYou can also limit the number of rooms by query.\n\nFiltering by metadata works by giving key values like `metadata.color=red`. Of course you can combine multiple metadata clauses to refine the response like `metadata.color=red&metadata.type=text`. Notice here the operator AND is applied between each clauses.\n\nFiltering by groups or userId works by giving a list of groups like `groupIds=marketing,GZo7tQ,product` or/and a userId like `userId=user1`.\nNotice here the operator OR is applied between each `groupIds` and the `userId`.\n",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of rooms to be returned. The limit can range between 1 and 100, and defaults to 20."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startingAfter",
            "description": "A cursor used for pagination. You get the value from the response of the previous page."
          },
          {
            "schema": {
              "type": "string",
              "example": "metadata.colors=blue"
            },
            "in": "query",
            "name": "metadata.KEY",
            "description": "A filter on metadata. Multiple metadata keys can be used to filter rooms."
          },
          {
            "schema": {
              "type": "string",
              "example": "userId=user1"
            },
            "in": "query",
            "name": "userId",
            "description": "A filter on users accesses."
          },
          {
            "schema": {
              "type": "string",
              "example": "groupsIds=group1,group2"
            },
            "in": "query",
            "name": "groupIds",
            "description": "A filter on groups accesses. Multiple groups can be used."
          }
        ]
      },
      "post": {
        "summary": "Create room",
        "tags": [],
        "responses": {
          "200": {
            "description": "Success. Returns the created room.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                },
                "examples": {
                  "example": {
                    "value": {
                      "type": "room",
                      "id": "my-room-3ebc26e2bf96",
                      "lastConnectionAt": "2022-08-22T15:10:25.225Z",
                      "createdAt": "2022-08-22T15:10:25.225Z",
                      "metadata": {
                        "color": "blue"
                      },
                      "defaultAccesses": [
                        "room:write"
                      ],
                      "groupsAccesses": {
                        "product": [
                          "room:write"
                        ]
                      },
                      "usersAccesses": {
                        "alice": [
                          "room:write"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "operationId": "post-rooms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoom"
              },
              "examples": {
                "example": {
                  "value": {
                    "id": "my-room-3ebc26e2bf96",
                    "defaultAccesses": [
                      "room:write"
                    ],
                    "metadata": {
                      "color": "blue"
                    },
                    "usersAccesses": {
                      "alice": [
                        "room:write"
                      ]
                    },
                    "groupsAccesses": {
                      "product": [
                        "room:write"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Create a new room. `id` and `defaultAccesses` are required. \n- `defaultAccessess` could be `[]` or `[\"room:write\"]` (private or public). \n- `metadata` could be key/value as `string` or `string[]`. `metadata` supports maximum 50 entries. Key length has a limit of 40 characters maximum. Value length has a limit of 256 characters maximum. `metadata` is optional field.\n- `usersAccesses` could be `[]` or `[\"room:write\"]` for every records. `usersAccesses` can contain 100 ids maximum. Id length has a limit of 40 characters. `usersAccesses` is optional field.\n- `groupsAccesses` are optional fields.\n"
      },
      "parameters": []
    },
    "/rooms/{roomId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "roomId",
          "in": "path",
          "required": true,
          "description": "`id` of the room"
        }
      ],
      "get": {
        "summary": "Get room",
        "operationId": "get-rooms-roomId",
        "responses": {
          "200": {
            "description": "Success. Returns the room.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "type": "room",
                      "id": "react-todo-list",
                      "lastConnectionAt": "2022-08-04T21:07:09.380Z",
                      "createdAt": "2022-07-13T14:32:50.697Z",
                      "metadata": {
                        "color": "blue",
                        "size": "10",
                        "target": [
                          "abc",
                          "def"
                        ]
                      },
                      "defaultAccesses": [
                        "room:write"
                      ],
                      "groupsAccesses": {
                        "marketing": [
                          "room:write"
                        ]
                      },
                      "usersAccesses": {
                        "alice": [
                          "room:write"
                        ],
                        "vinod": [
                          "room:write"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        },
        "description": "Get a room by its `id`. ",
        "parameters": []
      },
      "post": {
        "summary": "Update room",
        "tags": [],
        "responses": {
          "200": {
            "description": "Success. Returns the updated room.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "type": "room",
                      "id": "react-todo-list",
                      "lastConnectionAt": "2022-08-04T21:07:09.380Z",
                      "createdAt": "2022-07-13T14:32:50.697Z",
                      "metadata": {
                        "color": "blue",
                        "size": "10",
                        "target": [
                          "abc",
                          "def"
                        ]
                      },
                      "defaultAccesses": [
                        "room:write"
                      ],
                      "groupsAccesses": {
                        "marketing": [
                          "room:write"
                        ]
                      },
                      "usersAccesses": {
                        "alice": [
                          "room:write"
                        ],
                        "vinod": [
                          "room:write"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "operationId": "post-rooms-roomId",
        "description": "Updates specific properties of a room. It's not necessary to provide the entire room's information. \nSetting a property to `null` means to delete this property. For example, if you want to remove access to a specific user without losing other users: \n``{\n    \"usersAccesses\": {\n        \"john\": null\n    }\n}``\n`defaultAccessess`, `metadata`, `usersAccesses`, `groupsAccesses` can be updated.\n\n- `defaultAccessess` could be `[]` or `[\"room:write\"]` (private or public). \n- `metadata` could be key/value as `string` or `string[]`. `metadata` supports maximum 50 entries. Key length has a limit of 40 characters maximum. Value length has a limit of 256 characters maximum. `metadata` is optional field.\n- `usersAccesses` could be `[]` or `[\"room:write\"]` for every records. `usersAccesses` can contain 100 ids maximum. Id length has a limit of 256 characters. `usersAccesses` is optional field.\n- `groupsAccesses` could be `[]` or `[\"room:write\"]` for every records. `groupsAccesses` can contain 100 ids maximum. Id length has a limit of 256 characters. `groupsAccesses` is optional field.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoom"
              },
              "examples": {
                "example-1": {
                  "value": {
                    "defaultAccesses": [
                      "room:write"
                    ],
                    "usersAccesses": {
                      "vinod": [
                        "room:write"
                      ],
                      "alice": [
                        "room:write"
                      ]
                    },
                    "groupsAccesses": {
                      "marketing": [
                        "room:write"
                      ]
                    },
                    "metadata": {
                      "color": "blue"
                    }
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "description": ""
        }
      },
      "delete": {
        "summary": "Delete room",
        "tags": [],
        "responses": {
          "204": {
            "description": "Success. The room was deleted"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "operationId": "delete-rooms-roomId",
        "description": "Deletes a room. A deleted room is no longer accessible from the API or the dashboard and it cannot be restored. \n\n"
      }
    },
    "/rooms/{roomId}/active_users": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "roomId",
          "in": "path",
          "required": true,
          "description": "`id` of the room"
        }
      ],
      "get": {
        "summary": "Get active users",
        "tags": [],
        "operationId": "get-rooms-roomId-active-users",
        "description": "Returns a list of users currently present in the requested room. For better performance, we recommand to call this endpoint every 10 seconds maximum. \nDuplicates can happen if a user is in the requested room with multiple browser tabs opened.",
        "responses": {
          "200": {
            "description": "Success. Returns the list of active users for the specified room.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveUsersResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "type": "user",
                          "connectionId": 16,
                          "id": "alice",
                          "info": {}
                        },
                        {
                          "type": "user",
                          "connectionId": 20,
                          "id": "bob",
                          "info": {}
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/rooms/{roomId}/storage": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "roomId",
          "in": "path",
          "required": true,
          "description": "`id` of the room"
        }
      ],
      "get": {
        "summary": "Get storage",
        "tags": [],
        "responses": {
          "200": {
            "description": "Success. Returns the room storage as JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "liveblocksType": {
                      "type": "string"
                    },
                    "data": {
                      "type": [
                        "string",
                        "object"
                      ]
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "liveblocksType": "LiveObject",
                      "data": {
                        "aLiveObject": {
                          "liveblocksType": "LiveObject",
                          "data": {
                            "a": 1
                          }
                        },
                        "aLiveList": {
                          "liveblocksType": "LiveList",
                          "data": [
                            "a",
                            "b"
                          ]
                        },
                        "aLiveMap": {
                          "liveblocksType": "LiveMap",
                          "data": {
                            "a": 1,
                            "b": 2
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        },
        "operationId": "get-rooms-roomId-storage",
        "description": "Returns a room storage as JSON.\n\nSome implementation details:\nEach Liveblocks data structure is represented by a JSON element having two properties:\n`\"liveblocksType\": \"LiveObject\" | \"LiveList\" | \"LiveMap\"`\n`\"data\"` => contains the nested data structures (children) and data.\nThe root is always a `LiveObject`."
      },
      "post": {
        "summary": "Initialize storage",
        "operationId": "post-rooms-roomId-storage",
        "responses": {
          "200": {
            "description": "Success. The storage is initialized. Returns the room storage as JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "liveblocksType": {
                      "type": "string"
                    },
                    "data": {
                      "type": [
                        "string",
                        "object"
                      ]
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "liveblocksType": "LiveObject",
                      "data": {
                        "aLiveObject": {
                          "liveblocksType": "LiveObject",
                          "data": {
                            "a": 1
                          }
                        },
                        "aLiveList": {
                          "liveblocksType": "LiveList",
                          "data": [
                            "a",
                            "b"
                          ]
                        },
                        "aLiveMap": {
                          "liveblocksType": "LiveMap",
                          "data": {
                            "a": 1,
                            "b": 2
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        },
        "description": "Initializes a room storage. The room must already exist and have an empty storage.\n\nThe format of the request body is the same as what's returned by the get storage endpoint.\n\nFor each Liveblocks data structure that you want to create, you need a JSON element having two properties:\n- \"liveblocksType\": \"LiveObject\" | \"LiveList\" | \"LiveMap\"\n- \"data\" => contains the nested data structures (children) and data.\n\nThe root's type can only be LiveObject.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "liveblocksType": {
                    "type": "string"
                  },
                  "data": {
                    "type": "object"
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "liveblocksType": "LiveObject",
                    "data": {
                      "aLiveObject": {
                        "liveblocksType": "LiveObject",
                        "data": {
                          "a": 1
                        }
                      },
                      "aLiveList": {
                        "liveblocksType": "LiveList",
                        "data": [
                          "a",
                          "b"
                        ]
                      },
                      "aLiveMap": {
                        "liveblocksType": "LiveMap",
                        "data": {
                          "a": 1,
                          "b": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "description": ""
        }
      },
      "delete": {
        "summary": "Delete storage",
        "operationId": "delete-rooms-roomId-storage",
        "responses": {
          "200": {
            "description": "Success. The room has no more storage."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        },
        "description": "Deletes all elements of the room storage."
      }
    },
    "/rooms/{roomId}/authorize": {
      "post": {
        "summary": "Get an access token to enter a room",
        "operationId": "post-authorize",
        "responses": {
          "200": {
            "description": "Success. Returns the JWT token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorization"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAuthorization"
              },
              "examples": {
                "example-1": {
                  "value": {
                    "userId": "b2c1c290-f2c9-45de-a74e-6b7aa0690f59",
                    "groupIds": [
                      "g1",
                      "g2"
                    ],
                    "userInfo": {
                      "name": "bob",
                      "colors": [
                        "blue",
                        "red"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "This endpoint lets your application server (= your backend) obtain a token that one of its clients (= your frontend) can use to enter a Liveblocks room. You use this endpoint to implement your own application’s custom authentication endpoint. When making this request, you’ll have to use your secret key.\n\nThe body for this POST request lets you declare what user ID the token is for, by means of the `userId` property. This can be whatever internal identifier you use for your user accounts, as long as it uniquely identifies an account. Setting the `userId` is optional if you want to use public rooms, but it is required to enter a private room (because permissions are assigned to specific user IDs). You can also declare which `groupIds` this user belongs to, in case you want to use the group permission system.\n\nAdditionally, you can set custom metadata to the token, which will be publicly accessible by other clients, through the `user.info` property. This is useful to store static data like avatar images, or the user's display name.",
        "parameters": []
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "roomId",
          "in": "path",
          "required": true,
          "description": "`id` of the room"
        }
      ]
    },
    "/rooms/{roomId}/public/authorize": {
      "post": {
        "summary": "Get JWT token for WebSocket with with public key",
        "operationId": "post-public-authorize",
        "responses": {
          "200": {
            "description": "Success. Returns the JWT token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorization"
                },
                "examples": {
                  "example": {
                    "value": {
                      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "description": "This endpoint works with the public key and can be used client side. That means you don't need to implement a dedicated authorization endpoint server side. \nThe generated JWT token works only with public room (`defaultAccesses: [\"room:write\"]`).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicAuthorizeBodyRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "publicApiKey": "pk_test_lOMrmwejSWLaPYQc5_JuGHXXX"
                  }
                }
              }
            }
          },
          "description": ""
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "roomId",
          "in": "path",
          "required": true,
          "description": "`id` of the room"
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "Room": {
        "title": "Room",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "room"
            ]
          },
          "lastConnectionAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "defaultAccesses": {
            "type": [
              "string",
              "array"
            ],
            "uniqueItems": true,
            "items": {}
          },
          "usersAccesses": {
            "type": "object"
          },
          "groupsAccesses": {
            "type": "object"
          }
        },
        "examples": [],
        "x-internal": false
      },
      "UpdateRoom": {
        "type": "object",
        "title": "UpdateRoom",
        "additionalProperties": false,
        "properties": {
          "defaultAccesses": {
            "type": [
              "null",
              {
                "type": "object",
                "additionalProperties": {
                  "type": "array"
                }
              },
              "array"
            ],
            "items": {
              "type": "string"
            }
          },
          "usersAccesses": {
            "type": [
              "object",
              "null"
            ],
            "description": "A map of user identifiers to permissions list. Setting the value as `null` will clear all users' accesses. Setting one user identifier as `null` will clear this user's accesses."
          },
          "groupsAccesses": {
            "type": [
              "object",
              "null"
            ],
            "description": "A map of group identifiers to permissions list. Setting the value as `null` will clear all groups' accesses. Setting one group identifier as `null` will clear this group's accesses."
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "A map of metadata keys to their values (`string` or `string[]`). Setting the value as `null` will clear all metadata. Setting a key as `null` will clear the key."
          }
        }
      },
      "CreateRoom": {
        "title": "CreateRoom",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "defaultAccesses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "usersAccesses": {
            "type": "object"
          },
          "groupsAccesses": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "defaultAccesses"
        ]
      },
      "Error": {
        "title": "Error",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Message explaining the error"
          },
          "suggestion": {
            "type": "string",
            "description": "A suggestion on how to fix the error"
          },
          "doc": {
            "type": "string",
            "description": "A link to the documentation"
          }
        }
      },
      "Authorization": {
        "title": "Authorization",
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "CreateAuthorization": {
        "title": "CreateAuthorization",
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "userInfo": {
            "type": "object"
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetRooms": {
        "title": "GetRooms",
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "lastConnectionAt": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string"
                },
                "metadata": {
                  "type": "object"
                },
                "defaultAccesses": {
                  "type": [
                    "string",
                    "array"
                  ],
                  "items": {}
                },
                "usersAccesses": {
                  "type": "object"
                },
                "groupsAccesses": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "ActiveUsersResponse": {
        "title": "ActiveUsersResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "connectionId": {
                  "type": "number"
                },
                "": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "PublicAuthorizeBodyRequest": {
        "title": "PublicAuthorizeBodyRequest",
        "type": "object",
        "properties": {
          "publicApiKey": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "name": "Bearer sk_xxx",
        "type": "apiKey",
        "in": "header"
      }
    },
    "responses": {
      "401": {
        "description": "Missing or wrong credentials.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "WRONG_KEY_USED": {
                "value": {
                  "error": "WRONG_KEY_USED",
                  "message": "Public key instead of the secret key.",
                  "suggestion": "Please use your secret key instead of the public key, the secret key is available in the dashboard: https://liveblocks.io/dashboard/apikeys.",
                  "docs": ""
                }
              },
              "MISSING_SECRET_KEY": {
                "value": {
                  "error": "MISSING_SECRET_KEY",
                  "message": "Missing secret key in authentication header",
                  "suggestion": "Please use a secret key, the secret key is available in the dashboard: https://liveblocks.io/dashboard/apikeys",
                  "docs": ""
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Unauthorized access.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "INVALID_SECRET_KEY": {
                "value": {
                  "error": "INVALID_SECRET_KEY",
                  "message": "Invalid secret key.",
                  "suggestion": "Please use a valid secret key, the secret key is available in the dashboard: https://liveblocks.io/dashboard/apikeys.",
                  "docs": ""
                }
              },
              "INVALID_PUBLIC_KEY": {
                "value": {
                  "error": "INVALID_PUBLIC_KEY",
                  "message": "Invalid public key",
                  "suggestion": "Please use a valid public key, the public key is available in the dashboard: https://liveblocks.io/dashboard/apikeys",
                  "docs": ""
                }
              },
              "UNAUTHORIZED_ROOM_ACCESS": {
                "value": {
                  "error": "UNAUTHORIZED_ROOM_ACCESS",
                  "message": "The user does not have permission to access the room.",
                  "suggestion": "Please add the user's ID or one of the user's group IDs to the room first.",
                  "docs": ""
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Room not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "ROOM_NOT_FOUND": {
                "value": {
                  "error": "ROOM_NOT_FOUND",
                  "message": "Room not found.",
                  "suggestion": "Please use a valid room ID, room IDs are available in the dashboard: https://liveblocks.io/dashboard/rooms.",
                  "docs": ""
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Room already exists.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "ROOM_ALREADY_EXISTS": {
                "value": {
                  "error": "ROOM_ALREADY_EXISTS",
                  "message": "The room already exists.",
                  "suggestion": "Please use a different room id or update the existing room.",
                  "doc": ""
                }
              }
            }
          },
          "application/xml": {
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "422": {
        "description": "Unprocessable entity.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "UNPROCESSABLE_ENTITY": {
                "value": {
                  "error": "UNPROCESSABLE_ENTITY",
                  "message": "Missing key: 'defaultAccesses'.",
                  "suggestion": "Please ensure the data follows the correct format.",
                  "docs": ""
                }
              }
            }
          }
        }
      }
    },
    "requestBodies": {}
  },
  "x-internal": true
}