{
  "openapi": "3.1.0",
  "info": {
    "title": "API v2",
    "version": "2.0"
  },
  "servers": [
    {
      "url": "https://api.liveblocks.io/v2"
    }
  ],
  "paths": {
    "/rooms": {
      "get": {
        "summary": "Get rooms",
        "description": "This endpoint returns a list of your rooms. The rooms are returned sorted by creation date, from newest to oldest. You can filter rooms by metadata, users accesses and groups accesses.\n\nThere is a pagination system where the next page URL is returned in the response as `nextPage`.\nYou can also limit the number of rooms by query.\n\nFiltering by metadata works by giving key values like `metadata.color=red`. Of course you can combine multiple metadata clauses to refine the response like `metadata.color=red&metadata.type=text`. Notice here the operator AND is applied between each clauses.\n\nFiltering by groups or userId works by giving a list of groups like `groupIds=marketing,GZo7tQ,product` or/and a userId like `userId=user1`.\nNotice here the operator OR is applied between each `groupIds` and the `userId`.\n",
        "tags": ["Room"],
        "parameters": [
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of rooms to be returned. The limit can range between 1 and 100, and defaults to 20."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startingAfter",
            "description": "A cursor used for pagination. You get the value from the response of the previous page."
          },
          {
            "schema": {
              "type": "string",
              "examples": ["metadata.colors=blue"]
            },
            "in": "query",
            "name": "metadata.KEY",
            "description": "A filter on metadata. Multiple metadata keys can be used to filter rooms."
          },
          {
            "schema": {
              "type": "string",
              "examples": ["userId=user1"]
            },
            "in": "query",
            "name": "userId",
            "description": "A filter on users accesses."
          },
          {
            "schema": {
              "type": "string",
              "examples": ["groupsIds=group1,group2"]
            },
            "in": "query",
            "name": "groupIds",
            "description": "A filter on groups accesses. Multiple groups can be used."
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns the list of rooms and the next page URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRooms"
                },
                "examples": {
                  "example": {
                    "value": {
                      "nextPage": "/v2/rooms?startingAfter=W1siaWQiLCJVRzhWYl82SHRUS0NzXzFvci1HZHQiXSxbImNyZWF0ZWRBdCIsMTY2MDAwMDk4ODEzN11d",
                      "data": [
                        {
                          "type": "room",
                          "id": "HTOGSiXcORTECjfNBBLii",
                          "lastConnectionAt": "2022-08-08T23:23:15.281Z",
                          "createdAt": "2022-08-08T23:23:15.281Z",
                          "metadata": {
                            "name": ["My room"],
                            "type": ["whiteboard"]
                          },
                          "defaultAccesses": ["room:write"],
                          "groupsAccesses": {
                            "product": ["room:write"]
                          },
                          "usersAccesses": {
                            "vinod": ["room:write"]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "operationId": "get-rooms"
      },
      "post": {
        "summary": "Create room",
        "description": "This endpoint creates a new room. `id` and `defaultAccesses` are required. \n- `defaultAccessess` could be `[]` or `[\"room:write\"]` (private or public). \n- `metadata` could be key/value as `string` or `string[]`. `metadata` supports maximum 50 entries. Key length has a limit of 40 characters maximum. Value length has a limit of 256 characters maximum. `metadata` is optional field.\n- `usersAccesses` could be `[]` or `[\"room:write\"]` for every records. `usersAccesses` can contain 100 ids maximum. Id length has a limit of 40 characters. `usersAccesses` is optional field.\n- `groupsAccesses` are optional fields.\n",
        "tags": ["Room"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success. Returns the created room.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                },
                "examples": {
                  "example": {
                    "value": {
                      "type": "room",
                      "id": "my-room-3ebc26e2bf96",
                      "lastConnectionAt": "2022-08-22T15:10:25.225Z",
                      "createdAt": "2022-08-22T15:10:25.225Z",
                      "metadata": {
                        "color": "blue"
                      },
                      "defaultAccesses": ["room:write"],
                      "groupsAccesses": {
                        "product": ["room:write"]
                      },
                      "usersAccesses": {
                        "alice": ["room:write"]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "operationId": "post-rooms",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoom"
              },
              "examples": {
                "example": {
                  "value": {
                    "id": "my-room-3ebc26e2bf96",
                    "defaultAccesses": ["room:write"],
                    "metadata": {
                      "color": "blue"
                    },
                    "usersAccesses": {
                      "alice": ["room:write"]
                    },
                    "groupsAccesses": {
                      "product": ["room:write"]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rooms/{roomId}": {
      "get": {
        "summary": "Get room",
        "tags": ["Room"],
        "operationId": "get-rooms-roomId",
        "responses": {
          "200": {
            "description": "Success. Returns the room.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                },
                "examples": {
                  "example": {
                    "value": {
                      "type": "room",
                      "id": "react-todo-list",
                      "lastConnectionAt": "2022-08-04T21:07:09.380Z",
                      "createdAt": "2022-07-13T14:32:50.697Z",
                      "metadata": {
                        "color": "blue",
                        "size": "10",
                        "target": ["abc", "def"]
                      },
                      "defaultAccesses": ["room:write"],
                      "groupsAccesses": {
                        "marketing": ["room:write"]
                      },
                      "usersAccesses": {
                        "alice": ["room:write"],
                        "vinod": ["room:write"]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        },
        "description": "This endpoint returns a room by its ID.",
        "parameters": []
      },
      "post": {
        "summary": "Update room",
        "tags": ["Room"],
        "responses": {
          "200": {
            "description": "Success. Returns the updated room.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                },
                "examples": {
                  "example": {
                    "value": {
                      "type": "room",
                      "id": "react-todo-list",
                      "lastConnectionAt": "2022-08-04T21:07:09.380Z",
                      "createdAt": "2022-07-13T14:32:50.697Z",
                      "metadata": {
                        "color": "blue",
                        "size": "10",
                        "target": ["abc", "def"]
                      },
                      "defaultAccesses": ["room:write"],
                      "groupsAccesses": {
                        "marketing": ["room:write"]
                      },
                      "usersAccesses": {
                        "alice": ["room:write"],
                        "vinod": ["room:write"]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "operationId": "post-rooms-roomId",
        "description": "This endpoint updates specific properties of a room. It’s not necessary to provide the entire room’s information. \nSetting a property to `null` means to delete this property. For example, if you want to remove access to a specific user without losing other users: \n``{\n    \"usersAccesses\": {\n        \"john\": null\n    }\n}``\n`defaultAccessess`, `metadata`, `usersAccesses`, `groupsAccesses` can be updated.\n\n- `defaultAccessess` could be `[]` or `[\"room:write\"]` (private or public). \n- `metadata` could be key/value as `string` or `string[]`. `metadata` supports maximum 50 entries. Key length has a limit of 40 characters maximum. Value length has a limit of 256 characters maximum. `metadata` is optional field.\n- `usersAccesses` could be `[]` or `[\"room:write\"]` for every records. `usersAccesses` can contain 100 ids maximum. Id length has a limit of 256 characters. `usersAccesses` is optional field.\n- `groupsAccesses` could be `[]` or `[\"room:write\"]` for every records. `groupsAccesses` can contain 100 ids maximum. Id length has a limit of 256 characters. `groupsAccesses` is optional field.\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoom"
              },
              "examples": {
                "example": {
                  "value": {
                    "defaultAccesses": ["room:write"],
                    "usersAccesses": {
                      "vinod": ["room:write"],
                      "alice": ["room:write"]
                    },
                    "groupsAccesses": {
                      "marketing": ["room:write"]
                    },
                    "metadata": {
                      "color": "blue"
                    }
                  }
                }
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete room",
        "tags": ["Room"],
        "responses": {
          "204": {
            "description": "Success. The room was deleted"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "operationId": "delete-rooms-roomId",
        "description": "This endpoint deletes a room. A deleted room is no longer accessible from the API or the dashboard and it cannot be restored. \n\n"
      }
    },
    "/rooms/{roomId}/active_users": {
      "get": {
        "summary": "Get active users",
        "tags": ["Room"],
        "operationId": "get-rooms-roomId-active-users",
        "description": "This endpoint returns a list of users currently present in the requested room. For better performance, we recommand to call this endpoint every 10 seconds maximum. \nDuplicates can happen if a user is in the requested room with multiple browser tabs opened.",
        "responses": {
          "200": {
            "description": "Success. Returns the list of active users for the specified room.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActiveUsersResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "type": "user",
                          "connectionId": 16,
                          "id": "alice",
                          "info": {}
                        },
                        {
                          "type": "user",
                          "connectionId": 20,
                          "id": "bob",
                          "info": {}
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/rooms/{roomId}/broadcast_event": {
      "post": {
        "summary": "Broadcast event to a room",
        "description": "This endpoint enables the broadcast of an event to a room without having to connect to it via the `client` from `@liveblocks/client`. It takes any valid JSON as a request body. The `connectionId` passed to event listeners is `-1` when using this API.",
        "tags": ["Room"],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "ID of the room"
          }
        ],
        "operationId": "post-broadcast-event",
        "responses": {
          "204": {
            "description": "Success. An event was broadcast to the room."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "requestBody": {
          "description": "Any valid JSON.",
          "content": {
            "schema": {},
            "application/json": {
              "examples": {
                "example": {
                  "value": {
                    "type": "EMOJI",
                    "emoji": "🔥"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rooms/{roomId}/storage": {
      "get": {
        "summary": "Get Storage document",
        "description": "Returns the contents of the room’s Storage tree.\n\nThe default outputted format is called “plain LSON”, which includes information on the Live data structures in the tree. These nodes show up in the output as objects with two properties, for example:\n\n```json\n{\n  \"liveblocksType\": \"LiveObject\",\n  \"data\": ...\n}\n```\n\nIf you’re not interested in this information, you can use the simpler `?format=json` query param, see below.",
        "tags": ["Storage"],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "ID of the room"
          },
          {
            "schema": {
              "type": "string",
              "enum": ["plain-lson", "json"]
            },
            "name": "format",
            "in": "query",
            "required": false,
            "description": "Use `?format=json` to output a simplified JSON representation of the Storage tree. In that format, each LiveObject and LiveMap will be formatted as a simple JSON object, and each LiveList will be formatted as a simple JSON array. This is a lossy format because information about the original data structures is not retained, but it may be easier to work with."
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns the room’s Storage as JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "liveblocksType": {
                      "type": "string"
                    },
                    "data": {
                      "type": ["string", "object"]
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "liveblocksType": "LiveObject",
                      "data": {
                        "aLiveObject": {
                          "liveblocksType": "LiveObject",
                          "data": {
                            "a": 1
                          }
                        },
                        "aLiveList": {
                          "liveblocksType": "LiveList",
                          "data": ["a", "b"]
                        },
                        "aLiveMap": {
                          "liveblocksType": "LiveMap",
                          "data": {
                            "a": 1,
                            "b": 2
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        },
        "operationId": "get-rooms-roomId-storage"
      },
      "post": {
        "summary": "Initialize Storage document",
        "tags": ["Storage"],
        "operationId": "post-rooms-roomId-storage",
        "responses": {
          "200": {
            "description": "Success. The Storage is initialized. Returns the room’s Storage as JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "liveblocksType": {
                      "type": "string"
                    },
                    "data": {
                      "type": ["string", "object"]
                    }
                  }
                },
                "examples": {
                  "example": {
                    "value": {
                      "liveblocksType": "LiveObject",
                      "data": {
                        "aLiveObject": {
                          "liveblocksType": "LiveObject",
                          "data": {
                            "a": 1
                          }
                        },
                        "aLiveList": {
                          "liveblocksType": "LiveList",
                          "data": ["a", "b"]
                        },
                        "aLiveMap": {
                          "liveblocksType": "LiveMap",
                          "data": {
                            "a": 1,
                            "b": 2
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        },
        "description": "This endpoint initializes a room’s Storage. The room must already exist and have an empty Storage. Calling this endpoint will disconnect all users from the room if there are any.\n\nThe format of the request body is the same as what’s returned by the get Storage endpoint.\n\nFor each Liveblocks data structure that you want to create, you need a JSON element having two properties:\n- `\"liveblocksType\"` => `\"LiveObject\" | \"LiveList\" | \"LiveMap\"`\n- `\"data\"` => contains the nested data structures (children) and data.\n\nThe root’s type can only be LiveObject.\n\nA utility function, `toPlainLson` is included in `@liveblocks/client` from `1.0.9` to help convert `LiveObject`, `LiveList`, and `LiveMap` to the structure expected by the endpoint.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "liveblocksType": {
                    "type": "string"
                  },
                  "data": {
                    "type": "object"
                  }
                }
              },
              "examples": {
                "example": {
                  "value": {
                    "liveblocksType": "LiveObject",
                    "data": {
                      "aLiveObject": {
                        "liveblocksType": "LiveObject",
                        "data": {
                          "a": 1
                        }
                      },
                      "aLiveList": {
                        "liveblocksType": "LiveList",
                        "data": ["a", "b"]
                      },
                      "aLiveMap": {
                        "liveblocksType": "LiveMap",
                        "data": {
                          "a": 1,
                          "b": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Storage document",
        "tags": ["Storage"],
        "operationId": "delete-rooms-roomId-storage",
        "responses": {
          "200": {
            "description": "Success. The room has no more Storage."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        },
        "description": "This endpoint deletes all of the room’s Storage data. Calling this endpoint will disconnect all users from the room if there are any.\n"
      }
    },
    "/rooms/{roomId}/ydoc": {
      "get": {
        "summary": "Get Yjs document",
        "description": "This endpoint returns a JSON representation of the room’s Yjs document.",
        "tags": ["Yjs"],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "roomId",
            "in": "path",
            "required": true
          },
          {
            "schema": {
              "type": "boolean"
            },
            "name": "formatting",
            "in": "query",
            "allowEmptyValue": true,
            "required": false,
            "description": "If present, YText will return formatting."
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "key",
            "in": "query",
            "required": false,
            "description": "Returns only a single key’s value, e.g. `doc.get(key).toJSON()`."
          },
          {
            "schema": {
              "type": "string",
              "enum": ["ymap", "ytext", "yxmltext", "yxmlfragment", "yarray"]
            },
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Used with key to override the inferred type, i.e. `\"ymap\"` will return `doc.get(key, Y.Map)`."
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns the room’s Yjs document as JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example": {
                    "value": {
                      "someYText": "Contents of YText"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        },
        "operationId": "get-rooms-roomId-ydoc"
      },
      "put": {
        "summary": "Send a binary Yjs update",
        "tags": ["Yjs"],
        "responses": {
          "200": {
            "description": "Success. The given room’s Yjs doc has been updated.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 200
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        },
        "operationId": "put-rooms-roomId-ydoc",
        "description": "This endpoint is used to send a Yjs binary update to the room’s Yjs document. You can use this endpoint to initialize Yjs data for the room or to update the room’s Yjs document. Read the [Yjs documentation](https://docs.yjs.dev/api/document-updates) to learn how to create a binary update.",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": { "format": "binary", "type": "array" }
            }
          }
        }
      }
    },
    "/rooms/{roomId}/ydoc-binary": {
      "get": {
        "summary": "Get Yjs document encoded as a binary Yjs update",
        "description": "This endpoint returns the room’s Yjs document encoded as a single binary update. This can be used by `Y.applyUpdate(responseBody)` to get a copy of the document in your back end. See [Yjs documentation](https://docs.yjs.dev/api/document-updates) for more information on working with updates.",
        "tags": ["Yjs"],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "roomId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns the room’s Yjs document encoded as a binary Yjs update.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "array"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        },
        "operationId": "get-rooms-roomId-ydoc-binary"
      }
    },
    "/schemas": {
      "post": {
        "summary": "Create schema",
        "description": "This endpoint creates a new schema which can be referenced later to enforce a room’s Storage data structure. The schema consists of a name (for referencing it), and a body, which specifies the exact allowed shape of data in the room. This body is a multi-line string written in the Liveblocks [schema syntax](/docs/platform/schema-validation/syntax).",
        "tags": ["Schema validation"],
        "parameters": [],
        "operationId": "post-create-new-schema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "name": "my-schema",
                    "body": "type Logo {\nname: string\ntheme: string\n}\n\ntype Storage {\nlogo: LiveObject<Logo>\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Creates the new schema and returns it as JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "id": "my-schema@1",
                      "name": "my-schema",
                      "version": 1,
                      "createdAt": "2023-03-30T06:25:54.675Z",
                      "updatedAt": "2023-03-30T06:25:54.675Z",
                      "body": "type Logo {\nname: string\ntheme: string\n}\n\ntype Storage {\nlogo: LiveObject<Logo>\n"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "422": {
            "$ref": "#/components/responses/422-schema-validation"
          }
        }
      }
    },
    "/schemas/{id}": {
      "get": {
        "summary": "Get schema",
        "description": "This endpoint retrieves a schema by its id. The id is a combination of the schema name and version. For example, `my-schema@1`.",
        "tags": ["Schema validation"],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the schema"
          }
        ],
        "operationId": "get-create-new-schema",
        "responses": {
          "200": {
            "description": "Success. Found the schema and returns it as JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "id": "my-schema@1",
                      "name": "my-schema",
                      "version": 1,
                      "createdAt": "2023-03-30T06:25:54.675Z",
                      "updatedAt": "2023-03-30T06:25:54.675Z",
                      "body": "type Logo {\nname: string\ntheme: string\n}\n\ntype Storage {\nlogo: LiveObject<Logo>\n"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404-schema-validation"
          }
        }
      },
      "put": {
        "summary": "Update schema",
        "description": "This endpoint updates the body for the schema. A schema can only be updated if it is not used by any room.",
        "tags": ["Schema validation"],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the schema"
          }
        ],
        "operationId": "put-update-new-schema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSchema"
              },
              "examples": {
                "example": {
                  "value": {
                    "body": "type Logo {\nname: string\ntheme: string\n}\n\ntype Storage {\nlogo: LiveObject<Logo>\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Updates the new schema and increments the version. The schema `body` is returned as JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                },
                "examples": {
                  "example": {
                    "value": {
                      "id": "my-schema@2",
                      "name": "my-schema",
                      "version": 2,
                      "createdAt": "2023-03-30T07:25:54.675Z",
                      "updatedAt": "2023-03-30T07:25:54.675Z",
                      "body": "type Logo {\nname: string\ntheme: string\n}\n\ntype Storage {\nlogo: LiveObject<Logo>\n"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403-schema-validation"
          },
          "422": {
            "$ref": "#/components/responses/422-schema-validation"
          }
        }
      },
      "delete": {
        "summary": "Delete schema",
        "description": "This endpoint deletes a schema by its ID. The ID is a combination of the schema name and version. For example, `my-schema@1`. A schema can only be deleted if it is not attached to a room.",
        "tags": ["Schema validation"],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the schema"
          }
        ],
        "operationId": "delete-a-schema",
        "responses": {
          "200": {
            "description": "Success. Schema was delated"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403-schema-validation"
          }
        }
      }
    },
    "/rooms/{roomId}/schema": {
      "get": {
        "summary": "Get schema by room ID",
        "description": "This endpoint retrieves the schema attached to a room.",
        "tags": ["Schema validation"],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "ID of the room"
          }
        ],
        "operationId": "get-new-schema",
        "responses": {
          "200": {
            "description": "Success. Found the schema attached to the room and returns it as JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                },
                "examples": {
                  "example": {
                    "value": {
                      "id": "my-schema@1",
                      "name": "my-schema",
                      "version": 1,
                      "createdAt": "2023-03-30T06:25:54.675Z",
                      "updatedAt": "2023-03-30T06:25:54.675Z",
                      "body": "type Logo {\nname: string\ntheme: string\n}\n\ntype Storage {\nlogo: LiveObject<Logo>\n"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403-schema-validation"
          },
          "404": {
            "$ref": "#/components/responses/404-schema-validation"
          }
        }
      },
      "post": {
        "summary": "Attach schema to room",
        "description": "This endpoint attachs a schema to a room, and instantly enables runtime schema validation for the room. If the current contents of the room’s Storage do not match the schema, attaching will fail and the error message will give details on why the schema failed to attach.",
        "tags": ["Schema validation"],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "ID of the room"
          }
        ],
        "operationId": "post-attach-schema-to-room",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachSchema"
              },
              "examples": {
                "example": {
                  "value": {
                    "schema": "my-schema@1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Found the schema attached to the room. Returns the schema id as JSON.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachSchema"
                },
                "examples": {
                  "example": {
                    "value": {
                      "schema": "my-schema@1"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404-schema-validation"
          },
          "409": {
            "$ref": "#/components/responses/409-schema-validation"
          }
        }
      },
      "delete": {
        "summary": "Detach schema from room",
        "description": "This endpoint detaches the schema from a room.",
        "tags": ["Schema validation"],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "roomId",
            "in": "path",
            "required": true,
            "description": "ID of the room"
          }
        ],
        "operationId": "delete-detach-schema-to-room",
        "responses": {
          "200": {
            "description": "Success. Detached the schema from the room."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404-schema-validation"
          },
          "409": {
            "$ref": "#/components/responses/409-schema-validation"
          }
        }
      }
    },
    "/rooms/{roomId}/threads": {
      "get": {
        "summary": "Get room threads",
        "description": "This endpoint returns the threads in the requested room.",
        "tags": ["Comments"],
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "get-threads",
        "responses": {
          "200": {
            "description": "Success. Returns list of threads in a room.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Thread"
                      }
                    }
                  }
                },
                "examples": {
                  "Success": {
                    "value": {
                      "data": [
                        {
                          "type": "thread",
                          "id": "thread-id",
                          "roomId": "room-id",
                          "comments": [
                            {
                              "type": "comment",
                              "threadId": "thread-id",
                              "roomId": "room-id",
                              "id": "comment-id",
                              "userId": "string",
                              "createdAt": "2019-08-24T14:15:22Z",
                              "editedAt": "2019-08-24T14:15:22Z",
                              "deletedAt": "2019-08-24T14:15:22Z",
                              "body": {}
                            }
                          ],
                          "createdAt": "2019-08-24T14:15:22Z",
                          "metadata": {},
                          "updatedAt": "2019-08-24T14:15:22Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/rooms/{roomId}/threads/{threadId}": {
      "get": {
        "summary": "Get thread",
        "tags": ["Comments"],
        "description": "This endpoint returns a thread by its ID.",
        "operationId": "get-thread",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns requested thread.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Thread"
                },
                "examples": {
                  "Success": {
                    "value": {
                      "type": "thread",
                      "id": "thread-id",
                      "roomId": "room-id",
                      "comments": [
                        {
                          "type": "comment",
                          "threadId": "thread-id",
                          "roomId": "room-id",
                          "id": "comment-id",
                          "userId": "string",
                          "createdAt": "2019-08-24T14:15:22Z",
                          "editedAt": "2019-08-24T14:15:22Z",
                          "deletedAt": "2019-08-24T14:15:22Z",
                          "body": {}
                        }
                      ],
                      "createdAt": "2019-08-24T14:15:22Z",
                      "metadata": {},
                      "updatedAt": "2019-08-24T14:15:22Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/rooms/{roomId}/threads/{threadId}/comments/{commentId}": {
      "get": {
        "summary": "Get comment",
        "tags": ["Comments"],
        "description": "This endpoint returns a comment by its ID.",
        "operationId": "get-comment",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns the requested comment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                },
                "examples": {
                  "Success": {
                    "value": {
                      "type": "comment",
                      "threadId": "thread-id",
                      "roomId": "room-id",
                      "id": "comment-id",
                      "userId": "string",
                      "createdAt": "2019-08-24T14:15:22Z",
                      "editedAt": "2019-08-24T14:15:22Z",
                      "deletedAt": "2019-08-24T14:15:22Z",
                      "body": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/rooms/{roomId}/threads/{threadId}/participants": {
      "get": {
        "summary": "Get thread participants",
        "tags": ["Comments"],
        "description": "This endpoint returns the list of thread participants. It is a list of unique user IDs representing all the thread comment authors and mentioned users in comments.",
        "operationId": "get-thread-participants",
        "parameters": [
          {
            "name": "roomId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "threadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Returns the thread’s participants",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "participantIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "examples": {
                  "Success": {
                    "value": {
                      "participantIds": ["user-1", "user-2"]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/authorize-user": {
      "post": {
        "summary": "Get access token with secret key",
        "tags": ["Authentication"],
        "operationId": "post-authorize-user",
        "responses": {
          "200": {
            "description": "Success. Returns an access token that can be used to enter one or more rooms.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIi..."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizeUserRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "userId": "user-123",
                    "userInfo": {
                      "name": "bob",
                      "avatar": "https://example.org/images/user123.jpg"
                    },
                    "permissions": {
                      "my-room-1": ["room:write"],
                      "my-room-2": ["room:write"],
                      "my-room-*": ["room:read"]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "This endpoint lets your application server (your back end) obtain a token that one of its clients (your frontend) can use to enter a Liveblocks room. You use this endpoint to implement your own application’s custom authentication endpoint. When making this request, you’ll have to use your secret key.\n\n**Important:** The difference with an [ID token](#post-identify-user) is that an access token holds all the permissions, and is the source of truth. With ID tokens, permissions are set in the Liveblocks back end (through REST API calls) and \"checked at the door\" every time they are used to enter a room.\n\n**Note:** When using the `@liveblocks/node` package, you can use [`Liveblocks.prepareSession`](/docs/api-reference/liveblocks-node#access-tokens) in your back end to build this request.\n\nYou can pass the property `userId` in the request’s body. This can be whatever internal identifier you use for your user accounts as long as it uniquely identifies an account. The property `userId` is used by Liveblocks to calculate your account’s Monthly Active Users. One unique `userId` corresponds to one MAU.\n\nAdditionally, you can set custom metadata to the token, which will be publicly accessible by other clients through the `user.info` property. This is useful for storing static data like avatar images or the user’s display name.\n\nLastly, you’ll specify the exact permissions to give to the user using the `permissions` field. This is done in an object where the keys are room names, or room name patterns (ending in a `*`), and a list of permissions to assign the user for any room that matches that name exactly (or starts with the pattern’s prefix). For tips, see [Manage permissions with access tokens](/docs/rooms/permissions/access-token)."
      }
    },
    "/identify-user": {
      "post": {
        "summary": "Get ID token with secret key",
        "tags": ["Authentication"],
        "operationId": "post-identify-user",
        "responses": {
          "200": {
            "description": "Success. Returns an ID token that can be used to enter one or more rooms.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                },
                "examples": {
                  "example": {
                    "value": {
                      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIi..."
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentifyUserRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "userId": "user-123",
                    "groupIds": ["marketing", "engineering"],
                    "userInfo": {
                      "name": "bob",
                      "avatar": "https://example.org/images/user123.jpg"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "This endpoint lets your application server (your back end) obtain a token that one of its clients (your frontend) can use to enter a Liveblocks room. You use this endpoint to implement your own application’s custom authentication endpoint. When using this endpoint to obtain ID tokens, you should manage your permissions by assigning user and/or group permissions to rooms explicitly, see our [Manage permissions with ID tokens](/docs/rooms/permissions/id-token) section.\n\n**Important:** The difference with an [access token](#post-authorize-user) is that an ID token doesn’t hold any permissions itself. With ID tokens, permissions are set in the Liveblocks back end (through REST API calls) and \"checked at the door\" every time they are used to enter a room. With access tokens, all permissions are set in the token itself, and thus controlled from your back end entirely.\n\n**Note:** When using the `@liveblocks/node` package, you can use [`Liveblocks.identifyUser`](/docs/api-reference/liveblocks-node) in your back end to build this request.\n\nYou can pass the property `userId` in the request’s body. This can be whatever internal identifier you use for your user accounts as long as it uniquely identifies an account. The property `userId` is used by Liveblocks to calculate your account’s Monthly Active Users. One unique `userId` corresponds to one MAU.\n\nIf you want to use group permissions, you can also declare which `groupIds` this user belongs to. The group ID values are yours, but they will have to match the group IDs you assign permissions to when assigning permissions to rooms, see [Manage permissions with ID tokens](/docs/rooms/permissions/id-token)).\n\nAdditionally, you can set custom metadata to the token, which will be publicly accessible by other clients through the `user.info` property. This is useful for storing static data like avatar images or the user’s display name."
      }
    },
    "/rooms/{roomId}/authorize": {
      "post": {
        "summary": "Get single-room token with secret key (deprecated)",
        "description": "**Deprecated.** Prefer using [access tokens](#post-authorize-user) or [ID tokens](#post-identify-user) instead. Read more in our [migration guide](/docs/platform/upgrading/1.2).\n\nThis endpoint lets your application server (your back end) obtain a token that one of its clients (your frontend) can use to enter a Liveblocks room. You use this endpoint to implement your own application’s custom authentication endpoint. When making this request, you’ll have to use your secret key.\n\nYou can pass the property `userId` in the request’s body. This can be whatever internal identifier you use for your user accounts as long as it uniquely identifies an account. Setting the `userId` is optional if you want to use public rooms, but it is required to enter a private room (because permissions are assigned to specific user IDs). In case you want to use the group permission system, you can also declare which `groupIds` this user belongs to.\n\nThe property userId is used by Liveblocks to calculate your account’s Monthly Active Users. One unique userId corresponds to one MAU. If you don’t pass a userId, we will create for you a new anonymous userId on each connection, but your MAUs will be higher.\n\nAdditionally, you can set custom metadata to the token, which will be publicly accessible by other clients through the `user.info` property. This is useful for storing static data like avatar images or the user’s display name.",
        "tags": ["Deprecated"],
        "parameters": [],
        "operationId": "post-authorize",
        "responses": {
          "200": {
            "description": "Success. Returns an old-style single-room token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorization"
                },
                "examples": {
                  "example": {
                    "value": {
                      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAuthorization"
              },
              "examples": {
                "example": {
                  "value": {
                    "userId": "b2c1c290-f2c9-45de-a74e-6b7aa0690f59",
                    "groupIds": ["g1", "g2"],
                    "userInfo": {
                      "name": "bob",
                      "colors": ["blue", "red"]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/rooms/{roomId}/public/authorize": {
      "post": {
        "summary": "Get single-room token with public key (deprecated)",
        "tags": ["Deprecated"],
        "operationId": "post-public-authorize",
        "responses": {
          "200": {
            "description": "Success. Returns the JWT token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorization"
                },
                "examples": {
                  "example": {
                    "value": {
                      "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "422": {
            "$ref": "#/components/responses/422"
          }
        },
        "description": "**Deprecated.** When you update Liveblocks to 1.2, you no longer need to get a JWT token when using a public key.\n\nThis endpoint works with the public key and can be used client side. That means you don’t need to implement a dedicated authorization endpoint server side. \nThe generated JWT token works only with public room (`defaultAccesses: [\"room:write\"]`).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicAuthorizeBodyRequest"
              },
              "examples": {
                "example": {
                  "value": {
                    "publicApiKey": "pk_test_lOMrmwejSWLaPYQc5_JuGHXXX"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Room": {
        "title": "Room",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["room"]
          },
          "lastConnectionAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "defaultAccesses": {
            "type": ["string", "array"],
            "uniqueItems": true,
            "items": {}
          },
          "usersAccesses": {
            "type": "object"
          },
          "groupsAccesses": {
            "type": "object"
          }
        }
      },
      "UpdateRoom": {
        "type": "object",
        "title": "UpdateRoom",
        "additionalProperties": false,
        "properties": {
          "defaultAccesses": {
            "type": ["array", "null"],
            "items": {
              "type": "string"
            }
          },
          "usersAccesses": {
            "type": ["object", "null"],
            "description": "A map of user identifiers to permissions list. Setting the value as `null` will clear all users’ accesses. Setting one user identifier as `null` will clear this user’s accesses."
          },
          "groupsAccesses": {
            "type": ["object", "null"],
            "description": "A map of group identifiers to permissions list. Setting the value as `null` will clear all groups’ accesses. Setting one group identifier as `null` will clear this group’s accesses."
          },
          "metadata": {
            "type": ["object", "null"],
            "description": "A map of metadata keys to their values (`string` or `string[]`). Setting the value as `null` will clear all metadata. Setting a key as `null` will clear the key."
          }
        }
      },
      "CreateRoom": {
        "title": "CreateRoom",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "defaultAccesses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "usersAccesses": {
            "type": "object"
          },
          "groupsAccesses": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          }
        },
        "required": ["id", "defaultAccesses"]
      },
      "Error": {
        "title": "Error",
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error code"
          },
          "message": {
            "type": "string",
            "description": "Message explaining the error"
          },
          "suggestion": {
            "type": "string",
            "description": "A suggestion on how to fix the error"
          },
          "docs": {
            "type": "string",
            "description": "A link to the documentation"
          }
        }
      },
      "Authorization": {
        "title": "Authorization",
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "TokenResponse": {
        "title": "An HTTP response body containing a token.",
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "AuthorizeUserRequest": {
        "title": "AuthorizeUserRequest",
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "userInfo": {
            "type": "object"
          },
          "permissions": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "IdentifyUserRequest": {
        "title": "IdentifyUserRequest",
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userInfo": {
            "type": "object"
          }
        }
      },
      "CreateAuthorization": {
        "title": "CreateAuthorization",
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "userInfo": {
            "type": "object"
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetRooms": {
        "title": "GetRooms",
        "type": "object",
        "properties": {
          "nextPage": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "lastConnectionAt": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string"
                },
                "metadata": {
                  "type": "object"
                },
                "defaultAccesses": {
                  "type": ["string", "array"],
                  "items": {}
                },
                "usersAccesses": {
                  "type": "object"
                },
                "groupsAccesses": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "ActiveUsersResponse": {
        "title": "ActiveUsersResponse",
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string"
                },
                "connectionId": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "PublicAuthorizeBodyRequest": {
        "title": "PublicAuthorizeBodyRequest",
        "type": "object",
        "properties": {
          "publicApiKey": {
            "type": "string"
          }
        }
      },
      "SchemaResponse": {
        "title": "Schema",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "version": {
            "type": "number"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "body": {
            "type": "string"
          }
        }
      },
      "SchemaRequest": {
        "title": "SchemaRequest",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "body": {
            "type": "string"
          }
        }
      },
      "UpdateSchema": {
        "title": "UpdateSchema",
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          }
        }
      },
      "AttachSchema": {
        "title": "AttachSchema",
        "type": "object",
        "properties": {
          "schema": {
            "type": "string"
          }
        }
      },
      "Thread": {
        "type": "object",
        "title": "Thread",
        "properties": {
          "type": {
            "const": "thread"
          },
          "id": {
            "type": "string"
          },
          "roomId": {
            "type": "string"
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "type": "object"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "type",
          "id",
          "roomId",
          "comments",
          "createdAt",
          "metadata"
        ],
        "examples": [
          {
            "type": "thread",
            "id": "thread-id",
            "roomId": "room-id",
            "comments": [
              {
                "type": "comment",
                "threadId": "thread-id",
                "roomId": "room-id",
                "id": "comment-id",
                "userId": "string",
                "createdAt": "2019-08-24T14:15:22Z",
                "editedAt": "2019-08-24T14:15:22Z",
                "deletedAt": "2019-08-24T14:15:22Z",
                "body": {}
              }
            ],
            "createdAt": "2019-08-24T14:15:22Z",
            "metadata": {},
            "updatedAt": "2019-08-24T14:15:22Z"
          }
        ],
        "description": ""
      },
      "Comment": {
        "type": "object",
        "title": "Comment",
        "properties": {
          "type": {
            "const": "comment",
            "readOnly": true,
            "default": "comment",
            "examples": ["comment"]
          },
          "threadId": {
            "type": "string"
          },
          "roomId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "editedAt": {
            "type": "string",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time"
          },
          "body": {
            "type": "object"
          }
        },
        "required": ["type", "threadId", "roomId", "id", "userId", "createdAt"],
        "examples": [
          {
            "type": "comment",
            "threadId": "thread-id",
            "roomId": "room-id",
            "id": "comment-id",
            "userId": "string",
            "createdAt": "2019-08-24T14:15:22Z",
            "editedAt": "2019-08-24T14:15:22Z",
            "deletedAt": "2019-08-24T14:15:22Z",
            "body": {}
          }
        ]
      }
    },
    "securitySchemes": {
      "Authorization": {
        "name": "Bearer sk_xxx",
        "type": "apiKey",
        "in": "header"
      }
    },
    "responses": {
      "401": {
        "description": "Missing or wrong credentials.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "WRONG_KEY_USED": {
                "value": {
                  "error": "WRONG_KEY_USED",
                  "message": "Public key instead of the secret key.",
                  "suggestion": "Please use your secret key instead of the public key, the secret key is available in the dashboard: https://liveblocks.io/dashboard/apikeys.",
                  "docs": ""
                }
              },
              "MISSING_SECRET_KEY": {
                "value": {
                  "error": "MISSING_SECRET_KEY",
                  "message": "Missing secret key in authentication header",
                  "suggestion": "Please use a secret key, the secret key is available in the dashboard: https://liveblocks.io/dashboard/apikeys",
                  "docs": ""
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Unauthorized access.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "INVALID_SECRET_KEY": {
                "value": {
                  "error": "INVALID_SECRET_KEY",
                  "message": "Invalid secret key.",
                  "suggestion": "Please use a valid secret key, the secret key is available in the dashboard: https://liveblocks.io/dashboard/apikeys.",
                  "docs": ""
                }
              },
              "INVALID_PUBLIC_KEY": {
                "value": {
                  "error": "INVALID_PUBLIC_KEY",
                  "message": "Invalid public key",
                  "suggestion": "Please use a valid public key, the public key is available in the dashboard: https://liveblocks.io/dashboard/apikeys",
                  "docs": ""
                }
              },
              "UNAUTHORIZED_ROOM_ACCESS": {
                "value": {
                  "error": "UNAUTHORIZED_ROOM_ACCESS",
                  "message": "The user does not have permission to access the room.",
                  "suggestion": "Please add the user’s ID or one of the user’s group IDs to the room first.",
                  "docs": ""
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Room not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "ROOM_NOT_FOUND": {
                "value": {
                  "error": "ROOM_NOT_FOUND",
                  "message": "Room not found.",
                  "suggestion": "Please use a valid room ID, room IDs are available in the dashboard: https://liveblocks.io/dashboard/rooms.",
                  "docs": ""
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Room already exists.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "ROOM_ALREADY_EXISTS": {
                "value": {
                  "error": "ROOM_ALREADY_EXISTS",
                  "message": "The room already exists.",
                  "suggestion": "Please use a different room id or update the existing room.",
                  "doc": ""
                }
              }
            }
          },
          "application/xml": {
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "422": {
        "description": "Unprocessable entity.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "UNPROCESSABLE_ENTITY": {
                "value": {
                  "error": "UNPROCESSABLE_ENTITY",
                  "message": "Missing key: 'defaultAccesses'.",
                  "suggestion": "Please ensure the data follows the correct format.",
                  "docs": ""
                }
              }
            }
          }
        }
      },
      "403-schema-validation": {
        "description": "Unauthorized access.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "SCHEMA_FROZEN": {
                "value": {
                  "error": "SCHEMA_FROZEN",
                  "message": "Schema is frozen",
                  "suggestion": "Please ensure no room is using this schema before modifying it"
                }
              },
              "INVALID_SECRET_KEY": {
                "value": {
                  "error": "INVALID_SECRET_KEY",
                  "message": "Invalid secret key.",
                  "suggestion": "Please use a valid secret key, the secret key is available in the dashboard: https://liveblocks.io/dashboard/apikeys.",
                  "docs": ""
                }
              },
              "INVALID_PUBLIC_KEY": {
                "value": {
                  "error": "INVALID_PUBLIC_KEY",
                  "message": "Invalid public key",
                  "suggestion": "Please use a valid public key, the public key is available in the dashboard: https://liveblocks.io/dashboard/apikeys",
                  "docs": ""
                }
              },
              "UNAUTHORIZED_ROOM_ACCESS": {
                "value": {
                  "error": "UNAUTHORIZED_ROOM_ACCESS",
                  "message": "The user does not have permission to access the room.",
                  "suggestion": "Please add the user’s ID or one of the user’s group IDs to the room first.",
                  "docs": ""
                }
              }
            }
          }
        }
      },
      "404-schema-validation": {
        "description": "Schema not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "SCHEMA_NOT_FOUND": {
                "value": {
                  "error": "SCHEMA_NOT_FOUND",
                  "message": "Schema not found.",
                  "suggestion": "Please use a valid schema ID, schema IDs are available in the dashboard: https://liveblocks.io/dashboard/schemas.",
                  "docs": ""
                }
              }
            }
          }
        }
      },
      "409-schema-validation": {
        "description": "Existing room data does not match this schema.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "SCHEMA_NOT_COMPATIBLE": {
                "value": {
                  "error": "SCHEMA_NOT_COMPATIBLE",
                  "message": "Existing room data does not match this schema.",
                  "suggestion": "Check the following error and make adjustments to your schema to be able to attach it to this room.",
                  "docs": ""
                }
              }
            }
          },
          "application/xml": {
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "422-schema-validation": {
        "description": "Unprocessable entity.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "UNPROCESSABLE_ENTITY": {
                "value": {
                  "error": "UNPROCESSABLE_ENTITY",
                  "message": "Value at key 'name': Schema name must be non empty string with less than 65 characters and only contain lowercase letters, numbers and dashes.",
                  "suggestion": "Please ensure the data follows the correct format.",
                  "docs": ""
                }
              },
              "INVALID_SCHEMA": {
                "value": {
                  "error": "INVALID_SCHEMA",
                  "message": "The schema you specified contains errors.",
                  "suggestion": "Please ensure the schema body follows the correct format, and has been converted to a string.",
                  "docs": ""
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication"
    },
    {
      "name": "Room"
    },
    {
      "name": "Storage"
    },
    {
      "name": "Yjs"
    },
    {
      "name": "Schema validation"
    },
    {
      "name": "Comments"
    },
    {
      "name": "Deprecated"
    }
  ],
  "x-internal": true
}
