# SomeObject
type SomeObject { 
  # Something
  a: { x: String
    y: {
      z: Number
    }, # Something
    z: String
  },
  b?: Number

  # Something

  c: {
    x?: String[]
  }
}

union B = { x: B } # | { x: A } 

union B = { x: B }

union C = "something" | { x: "else" } | LiveList<LiveObject<{ a: String, b: SomeObject }>> # ?

union D = # Comment
  | "something"
  | { x: 3 }
  | LiveList<LiveObject<{ a: String, b: SomeObject }>> | SomeObject

type ObjectB {
  a: SomeObject
  b: LiveObject<SomeObject>, test: LiveObject<{ x: Number }> # Something
  c: LiveMap<"st\"ring", SomeObject>,
  d: LiveMap<String, LiveList<LiveObject<{ a: String, b: SomeObject }>>>
}

type Storage {
  # Something
  a?: { x: "yay!" },
  b?: {
    # Something 
    x?: {},
  },
}

type Other {
  a: "string",
}
