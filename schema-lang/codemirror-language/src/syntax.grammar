// TODO: Styling: Differientate Name and String (built-in types)?
// TODO: Styling: Fix commas in generic types

@skip {
  whitespace | parentheses | Comment
}

@precedence {
  block
  union
  list
}

@top Document {
  definition+
}

definition {
  ObjectTypeDefinition
}

TypeKeyword {
  keyword<"type">
}

ValueName {
  name
}

NamedType {
  name
}

GenericType {
  NamedType "<" list<Type> ">"
}

ArrayType {
  NamedType "[]"+
}

Type {
  NamedType | GenericType | ArrayType | FieldsDefinition | Number | String
}

Number {
  digits
}

String {
  doubleQuotedString | singleQuotedString
}

NamedTypeDeclaration {
  capitalizedName
}

ObjectTypeDefinition {
  TypeKeyword NamedTypeDeclaration "="? FieldsDefinition
}

FieldsDefinition {
  block<ValueDefinition+>
}

ValueDefinition {
  ValueName "?"? ":" union<Type> separator?
}

@tokens {
  Comment { ("#" | "//") ![\n]* }

  name { $[_A-Za-z] $[_0-9A-Za-z]* }
  
  capitalizedName { $[_A-Z] $[_0-9A-Za-z]* }

  separator { "," | ";" }

  whitespace { @whitespace+ }

  parentheses { ("(" | ")") }

  digits { $[-]? @digit+ ( $[.] @digit* )? }

  escape { "\\" _ }
  singleQuotedString { "'" (stringContentSingle | escape)* ("'" | "\n") }
  doubleQuotedString { '"' (stringContentDouble | escape)* ('"' | "\n") }
  stringContentSingle { ![\\\n']+ }
  stringContentDouble { ![\\\n"]+ }

  "{" "}" "<" ">" "[" "]" ":" "|"
}

keyword<term> { @specialize[@name={term}]<name, term> }

block<expression> { !block "{" expression "}" }

union<value> { !union value ("|" value)* }

list<value> { !list value ("," value)* }

@detectDelim
