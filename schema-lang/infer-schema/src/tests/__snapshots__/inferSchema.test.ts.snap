// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`inferSchema correctly infers the "BASIC_LIVE_OBJECT" schema 1`] = `
"type Storage {
  fills: LiveObject<Fill>
  strokes: LiveObject<Stroke>
}

type Fill {
  mesh: string
  sole: string
  stripes: string
  laces: string
}

type Stroke {
  mesh: string
  sole: string
  laces: string
}"
`;

exports[`inferSchema correctly infers the "BASIC_MERGE" schema 1`] = `
"type Storage {
  fills: LiveObject<Fill>
  strokes: LiveObject<Stroke>
}

type Fill {
  position: Position
  sole: string
  stripes: string
  laces: string
}

type Stroke {
  position: Position
  sole: string
  laces: string
}

type Position {
  x: number
  y: number
}"
`;

exports[`inferSchema correctly infers the "BASIC_UNMERGEABLE" schema 1`] = `
"type Storage {
  fills: LiveObject<Fill>
  strokes: LiveObject<Stroke>
}

type Fill {
  mesh: Mesh
  sole: string
  stripes: string
  laces: string
}

type Mesh {
  a: number
}

type Stroke {
  mesh: StrokeMesh
  sole: string
  laces: string
}

type StrokeMesh {
  a: string
}"
`;

exports[`inferSchema correctly infers the "BRACKET_KEY" schema 1`] = `
"type Storage {
  _____: LiveObject<D> # FIXME: Field name 'd{' is illegal, can only contain alphanumeric characters and underscores
  _____2: LiveObject<D> # FIXME: Field name 'd]' is illegal, can only contain alphanumeric characters and underscores
}

type D {
}"
`;

exports[`inferSchema correctly infers the "CIRCULAR_MERGE" schema 1`] = `
"type Storage {
  a: LiveObject<A>
}

type B {
  a: LiveObject<A>
}

type C {
  a: LiveObject<A>
}

type A {
  a?: LiveObject<A>
  b?: LiveObject<B>
  c?: LiveObject<C>
}"
`;

exports[`inferSchema correctly infers the "EMPTY" schema 1`] = `
"type Storage {
}"
`;

exports[`inferSchema correctly infers the "EMPTY_KEY" schema 1`] = `
"type Storage {
  _____: LiveObject<Value> # FIXME: Field name '' is illegal, cannot be empty
}

type Value {
}"
`;

exports[`inferSchema correctly infers the "KEY_WITH_WHITESPACE" schema 1`] = `
"type Storage {
  _____: LiveObject<TestKey> # FIXME: Field name 'test key' is illegal, can only contain alphanumeric characters and underscores
}

type TestKey {
}"
`;

exports[`inferSchema correctly infers the "RESERVED_KEY" schema 1`] = `
"type Storage {
  _____: LiveObject<BlockType> # FIXME: Field name 'liveblocksType' is illegal, cannot be a reserved name
}

type BlockType {
}"
`;
