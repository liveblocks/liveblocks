/**
 * This file is AUTOMATICALLY GENERATED.
 * DO NOT edit this file manually.
 *
 * Instead, update the `ast.grammar` file, and re-run `npm run build-ast`
 */

export function isComment(node: Node): node is Comment {
  return node._kind === "LineComment";
}

export function isDefinition(node: Node): node is Definition {
  return node._kind === "ObjectTypeDef";
}

export function isTypeExpr(node: Node): node is TypeExpr {
  return node._kind === "ObjectLiteralExpr" || node._kind === "TypeRef";
}

export type Comment = LineComment;

export type Definition = ObjectTypeDef;

export type TypeExpr = ObjectLiteralExpr | TypeRef;

export type Range = [number, number];

export type Node =
  | Document
  | FieldDef
  | Identifier
  | LineComment
  | ObjectLiteralExpr
  | ObjectTypeDef
  | TypeName
  | TypeRef;

export function isRange(thing: Range): thing is Range {
  return (
    Array.isArray(thing) &&
    thing.length === 2 &&
    typeof thing[0] === "number" &&
    typeof thing[1] === "number"
  );
}

export function isNode(node: Node): node is Node {
  return (
    node._kind === "Document" ||
    node._kind === "FieldDef" ||
    node._kind === "Identifier" ||
    node._kind === "LineComment" ||
    node._kind === "ObjectLiteralExpr" ||
    node._kind === "ObjectTypeDef" ||
    node._kind === "TypeName" ||
    node._kind === "TypeRef"
  );
}

export type Document = {
  _kind: "Document";
  definitions: Definition[];
  comments: Comment[] | null;
  range: Range;
};

export type FieldDef = {
  _kind: "FieldDef";
  name: Identifier;
  optional: boolean;
  type: TypeExpr;
  range: Range;
};

export type Identifier = {
  _kind: "Identifier";
  name: string;
  range: Range;
};

export type LineComment = {
  _kind: "LineComment";
  text: string;
  range: Range;
};

export type ObjectLiteralExpr = {
  _kind: "ObjectLiteralExpr";
  fields: FieldDef[];
  range: Range;
};

export type ObjectTypeDef = {
  _kind: "ObjectTypeDef";
  name: TypeName;
  obj: ObjectLiteralExpr;
  range: Range;
};

export type TypeName = {
  _kind: "TypeName";
  name: string;
  range: Range;
};

export type TypeRef = {
  _kind: "TypeRef";
  name: TypeName;
  args: TypeExpr[];
  range: Range;
};

export function document(
  definitions: Definition[],
  comments: Comment[] | null = null,
  range: Range = [0, 0]
): Document {
  return {
    _kind: "Document",
    definitions,
    comments,
    range,
  };
}

export function fieldDef(
  name: Identifier,
  optional: boolean,
  type: TypeExpr,
  range: Range = [0, 0]
): FieldDef {
  return {
    _kind: "FieldDef",
    name,
    optional,
    type,
    range,
  };
}

export function identifier(name: string, range: Range = [0, 0]): Identifier {
  return {
    _kind: "Identifier",
    name,
    range,
  };
}

export function lineComment(text: string, range: Range = [0, 0]): LineComment {
  return {
    _kind: "LineComment",
    text,
    range,
  };
}

export function objectLiteralExpr(
  fields: FieldDef[] = [],
  range: Range = [0, 0]
): ObjectLiteralExpr {
  return {
    _kind: "ObjectLiteralExpr",
    fields,
    range,
  };
}

export function objectTypeDef(
  name: TypeName,
  obj: ObjectLiteralExpr,
  range: Range = [0, 0]
): ObjectTypeDef {
  return {
    _kind: "ObjectTypeDef",
    name,
    obj,
    range,
  };
}

export function typeName(name: string, range: Range = [0, 0]): TypeName {
  return {
    _kind: "TypeName",
    name,
    range,
  };
}

export function typeRef(
  name: TypeName,
  args: TypeExpr[] = [],
  range: Range = [0, 0]
): TypeRef {
  return {
    _kind: "TypeRef",
    name,
    args,
    range,
  };
}

interface Visitor<TContext> {
  Document?(node: Document, context: TContext): void;
  FieldDef?(node: FieldDef, context: TContext): void;
  Identifier?(node: Identifier, context: TContext): void;
  LineComment?(node: LineComment, context: TContext): void;
  ObjectLiteralExpr?(node: ObjectLiteralExpr, context: TContext): void;
  ObjectTypeDef?(node: ObjectTypeDef, context: TContext): void;
  TypeName?(node: TypeName, context: TContext): void;
  TypeRef?(node: TypeRef, context: TContext): void;
}

export function visit<TNode extends Node>(
  node: TNode,
  visitor: Visitor<undefined>
): TNode;
export function visit<TNode extends Node, TContext>(
  node: TNode,
  visitor: Visitor<TContext>,
  context: TContext
): TNode;
export function visit<TNode extends Node, TContext>(
  node: TNode,
  visitor: Visitor<TContext | undefined>,
  context?: TContext
): TNode {
  switch (node._kind) {
    case "Document":
      visitor.Document?.(node, context);
      node.definitions.forEach((d) => visit(d, visitor, context));
      // TODO: Implement visiting for _optional_ field node.comments
      break;

    case "FieldDef":
      visitor.FieldDef?.(node, context);
      visit(node.name, visitor, context);
      visit(node.type, visitor, context);
      break;

    case "Identifier":
      visitor.Identifier?.(node, context);
      break;

    case "LineComment":
      visitor.LineComment?.(node, context);
      break;

    case "ObjectLiteralExpr":
      visitor.ObjectLiteralExpr?.(node, context);
      node.fields.forEach((f) => visit(f, visitor, context));
      break;

    case "ObjectTypeDef":
      visitor.ObjectTypeDef?.(node, context);
      visit(node.name, visitor, context);
      visit(node.obj, visitor, context);
      break;

    case "TypeName":
      visitor.TypeName?.(node, context);
      break;

    case "TypeRef":
      visitor.TypeRef?.(node, context);
      visit(node.name, visitor, context);
      node.args.forEach((a) => visit(a, visitor, context));
      break;
  }

  return node;
}
