/**
 * This file is AUTOMATICALLY GENERATED.
 * DO NOT edit this file manually.
 *
 * Instead, update the `ast.grammar` file, and re-run `npm run build-ast`
 */

import invariant from 'invariant'

function isComment(node: Node): node is Comment {
    return node._kind === 'LineComment'
}

function isDefinition(node: Node): node is Definition {
    return node._kind === 'ObjectTypeDef'
}

function isLiteral(node: Node): node is Literal {
    return node._kind === 'StringLiteral'
}

function isTypeExpr(node: Node): node is TypeExpr {
    return node._kind === 'ObjectLiteralExpr' || isLiteral(node) || isTypeRef(node)
}

function isTypeRef(node: Node): node is TypeRef {
    return node._kind === 'InstantiatedType' || node._kind === 'TypeName'
}

export type Comment = LineComment

export type Definition = ObjectTypeDef

export type Literal = StringLiteral

export type TypeExpr = Literal | ObjectLiteralExpr | TypeRef

export type TypeRef = InstantiatedType | TypeName

export type Range = [number, number]

export type Node =
    | Document
    | FieldDef
    | Identifier
    | InstantiatedType
    | LineComment
    | ObjectLiteralExpr
    | ObjectTypeDef
    | StringLiteral
    | TypeName

function isRange(thing: Range): thing is Range {
    return (
        Array.isArray(thing) &&
        thing.length === 2 &&
        typeof thing[0] === 'number' &&
        typeof thing[1] === 'number'
    )
}

function isNode(node: Node): node is Node {
    return (
        node._kind === 'Document' ||
        node._kind === 'FieldDef' ||
        node._kind === 'Identifier' ||
        node._kind === 'InstantiatedType' ||
        node._kind === 'LineComment' ||
        node._kind === 'ObjectLiteralExpr' ||
        node._kind === 'ObjectTypeDef' ||
        node._kind === 'StringLiteral' ||
        node._kind === 'TypeName'
    )
}

export type Document = {
    _kind: 'Document'
    // _type?: Type
    definitions: Definition[]
    comments: Comment[]
    range?: Range
}

export type FieldDef = {
    _kind: 'FieldDef'
    // _type?: Type
    name: Identifier
    optional: boolean
    type: TypeExpr
    range?: Range
}

export type Identifier = {
    _kind: 'Identifier'
    // _type?: Type
    name: string
    range?: Range
}

export type InstantiatedType = {
    _kind: 'InstantiatedType'
    // _type?: Type
    name: TypeName
    args: TypeExpr[]
    range?: Range
}

export type LineComment = {
    _kind: 'LineComment'
    // _type?: Type
    text: string
    range?: Range
}

export type ObjectLiteralExpr = {
    _kind: 'ObjectLiteralExpr'
    // _type?: Type
    fields: FieldDef[]
    range?: Range
}

export type ObjectTypeDef = {
    _kind: 'ObjectTypeDef'
    // _type?: Type
    name: TypeName
    fields: FieldDef[]
    range?: Range
}

export type StringLiteral = {
    _kind: 'StringLiteral'
    // _type?: Type
    value: string
    rawValue: string
    range?: Range
}

export type TypeName = {
    _kind: 'TypeName'
    // _type?: Type
    name: string
    range?: Range
}

export default {
    Document(
        definitions: Definition[] = [],
        comments: Comment[] = [],
        range?: Range,
    ): Document {
        invariant(
            Array.isArray(definitions) && definitions.every((item) => isDefinition(item)),
            `Invalid value for "definitions" arg in "Document" call.\nExpected: @Definition*\nGot:      ${JSON.stringify(
                definitions,
            )}`,
        )

        invariant(
            Array.isArray(comments) && comments.every((item) => isComment(item)),
            `Invalid value for "comments" arg in "Document" call.\nExpected: @Comment*\nGot:      ${JSON.stringify(
                comments,
            )}`,
        )

        invariant(
            !range || isRange(range),
            `Invalid value for range in "Document".\nExpected: Range\nGot: ${JSON.stringify(
                range,
            )}`,
        )
        return {
            _kind: 'Document',
            // _type: undefined,
            definitions,
            comments,
            range,
        }
    },

    FieldDef(
        name: Identifier,
        optional: boolean,
        type: TypeExpr,
        range?: Range,
    ): FieldDef {
        invariant(
            name._kind === 'Identifier',
            `Invalid value for "name" arg in "FieldDef" call.\nExpected: Identifier\nGot:      ${JSON.stringify(
                name,
            )}`,
        )

        invariant(
            typeof optional === 'boolean',
            `Invalid value for "optional" arg in "FieldDef" call.\nExpected: boolean\nGot:      ${JSON.stringify(
                optional,
            )}`,
        )

        invariant(
            isTypeExpr(type),
            `Invalid value for "type" arg in "FieldDef" call.\nExpected: @TypeExpr\nGot:      ${JSON.stringify(
                type,
            )}`,
        )

        invariant(
            !range || isRange(range),
            `Invalid value for range in "FieldDef".\nExpected: Range\nGot: ${JSON.stringify(
                range,
            )}`,
        )
        return {
            _kind: 'FieldDef',
            // _type: undefined,
            name,
            optional,
            type,
            range,
        }
    },

    Identifier(name: string, range?: Range): Identifier {
        invariant(
            typeof name === 'string',
            `Invalid value for "name" arg in "Identifier" call.\nExpected: string\nGot:      ${JSON.stringify(
                name,
            )}`,
        )

        invariant(
            !range || isRange(range),
            `Invalid value for range in "Identifier".\nExpected: Range\nGot: ${JSON.stringify(
                range,
            )}`,
        )
        return {
            _kind: 'Identifier',
            // _type: undefined,
            name,
            range,
        }
    },

    InstantiatedType(name: TypeName, args: TypeExpr[], range?: Range): InstantiatedType {
        invariant(
            name._kind === 'TypeName',
            `Invalid value for "name" arg in "InstantiatedType" call.\nExpected: TypeName\nGot:      ${JSON.stringify(
                name,
            )}`,
        )

        invariant(
            Array.isArray(args) &&
                args.length > 0 &&
                args.every((item) => isTypeExpr(item)),
            `Invalid value for "args" arg in "InstantiatedType" call.\nExpected: @TypeExpr+\nGot:      ${JSON.stringify(
                args,
            )}`,
        )

        invariant(
            !range || isRange(range),
            `Invalid value for range in "InstantiatedType".\nExpected: Range\nGot: ${JSON.stringify(
                range,
            )}`,
        )
        return {
            _kind: 'InstantiatedType',
            // _type: undefined,
            name,
            args,
            range,
        }
    },

    LineComment(text: string, range?: Range): LineComment {
        invariant(
            typeof text === 'string',
            `Invalid value for "text" arg in "LineComment" call.\nExpected: string\nGot:      ${JSON.stringify(
                text,
            )}`,
        )

        invariant(
            !range || isRange(range),
            `Invalid value for range in "LineComment".\nExpected: Range\nGot: ${JSON.stringify(
                range,
            )}`,
        )
        return {
            _kind: 'LineComment',
            // _type: undefined,
            text,
            range,
        }
    },

    ObjectLiteralExpr(fields: FieldDef[] = [], range?: Range): ObjectLiteralExpr {
        invariant(
            Array.isArray(fields) && fields.every((item) => item._kind === 'FieldDef'),
            `Invalid value for "fields" arg in "ObjectLiteralExpr" call.\nExpected: FieldDef*\nGot:      ${JSON.stringify(
                fields,
            )}`,
        )

        invariant(
            !range || isRange(range),
            `Invalid value for range in "ObjectLiteralExpr".\nExpected: Range\nGot: ${JSON.stringify(
                range,
            )}`,
        )
        return {
            _kind: 'ObjectLiteralExpr',
            // _type: undefined,
            fields,
            range,
        }
    },

    ObjectTypeDef(name: TypeName, fields: FieldDef[] = [], range?: Range): ObjectTypeDef {
        invariant(
            name._kind === 'TypeName',
            `Invalid value for "name" arg in "ObjectTypeDef" call.\nExpected: TypeName\nGot:      ${JSON.stringify(
                name,
            )}`,
        )

        invariant(
            Array.isArray(fields) && fields.every((item) => item._kind === 'FieldDef'),
            `Invalid value for "fields" arg in "ObjectTypeDef" call.\nExpected: FieldDef*\nGot:      ${JSON.stringify(
                fields,
            )}`,
        )

        invariant(
            !range || isRange(range),
            `Invalid value for range in "ObjectTypeDef".\nExpected: Range\nGot: ${JSON.stringify(
                range,
            )}`,
        )
        return {
            _kind: 'ObjectTypeDef',
            // _type: undefined,
            name,
            fields,
            range,
        }
    },

    StringLiteral(value: string, rawValue: string, range?: Range): StringLiteral {
        invariant(
            typeof value === 'string',
            `Invalid value for "value" arg in "StringLiteral" call.\nExpected: string\nGot:      ${JSON.stringify(
                value,
            )}`,
        )

        invariant(
            typeof rawValue === 'string',
            `Invalid value for "rawValue" arg in "StringLiteral" call.\nExpected: string\nGot:      ${JSON.stringify(
                rawValue,
            )}`,
        )

        invariant(
            !range || isRange(range),
            `Invalid value for range in "StringLiteral".\nExpected: Range\nGot: ${JSON.stringify(
                range,
            )}`,
        )
        return {
            _kind: 'StringLiteral',
            // _type: undefined,
            value,
            rawValue,
            range,
        }
    },

    TypeName(name: string, range?: Range): TypeName {
        invariant(
            typeof name === 'string',
            `Invalid value for "name" arg in "TypeName" call.\nExpected: string\nGot:      ${JSON.stringify(
                name,
            )}`,
        )

        invariant(
            !range || isRange(range),
            `Invalid value for range in "TypeName".\nExpected: Range\nGot: ${JSON.stringify(
                range,
            )}`,
        )
        return {
            _kind: 'TypeName',
            // _type: undefined,
            name,
            range,
        }
    },

    // Node groups
    isNode,
    isComment,
    isDefinition,
    isLiteral,
    isTypeExpr,
    isTypeRef,
}
